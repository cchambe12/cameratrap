rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
#library(devtools)
#devtools::install_github("mikeyEcology/MLWIC")
library(reticulate)
library(tensorflow)
library(MLWIC)
setup(python_loc = "/Users/CatherineChamberlain/anaconda3/bin/python")
setwd("~/Documents/git/cameratrap")
## Step 2: load tensorflow -
#devtools::install_github("rstudio/tensorflow")
#library(tensorflow)
#install_tensorflow()
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
x<-read.csv("WildlifeDetections_CameraTrap.csv", header=TRUE)
head(x)
## Prepare for Training using Wild.ID classifications
tr<-read.csv("WildlifeDetections_CameraTrap.csv", header=TRUE)
trx<-subset(tr, select=c("Sampling Event", "Raw Name", "Genus", "Species"))
trx<-subset(tr, select=c("Sampling.Event", "Raw.Name", "Genus", "Species"))
trx$imageID <- paste(trx$Sampling.Event, trx$Raw.Name, sep="_")
trx$class <- paste(trx$Genus, trx$species, sep="_")
trx <- subset(trx, select=c("imageID", "class"))
head(trx)
## Prepare for Training using Wild.ID classifications
tr<-read.csv("WildlifeDetections_CameraTrap.csv", header=TRUE)
trx<-subset(tr, select=c("Sampling.Event", "Raw.Name", "Genus", "Species"))
trx$imageID <- paste(trx$Sampling.Event, trx$Raw.Name, sep="_")
trx$class <- paste(trx$Genus, trx$Species, sep="_")
trx <- subset(trx, select=c("imageID", "class"))
sort(unique(trx$class))
## Prepare for Training using Wild.ID classifications
tr<-read.csv("WildlifeDetections_CameraTrap.csv", header=TRUE)
trx<-subset(tr, select=c("Sampling.Event", "Raw.Name", "Genus", "Species"))
trx$imageID <- paste(trx$Sampling.Event, trx$Raw.Name, sep="_")
trx$animaltype <- paste(trx$Genus, trx$Species, sep="_")
trx$class <- as.integer(trx$animaltype)
head(trx)
trx$class <- as.integer(as.factor(trx$animaltype))
head(trx)
sort(unique(trx$class))
specieslist <- subset(trx, select=c("animaltype", "class"))
specieslist <- specieslist[!duplicated(specieslist),]
write.csv(specieslist, file="listofspecies.csv", row.names=FALSE)
trx <- subset(trx, select=c("imageID", "class"))
colnames(trx) <- NULL
head(trx)
write.csv(trx, file="train_image_labels.csv", row.names=FALSE)
tr<-read.csv("WildlifeDetections_CameraTrap.csv", header=TRUE)
trx<-subset(tr, select=c("Sampling.Event", "Raw.Name", "Genus", "Species"))
trx$imageID <- paste(trx$Sampling.Event, trx$Raw.Name, sep="_")
trx$animaltype <- paste(trx$Genus, trx$Species, sep="_")
trx$class <- as.integer(as.factor(trx$animaltype))
#specieslist <- subset(trx, select=c("animaltype", "class"))
#specieslist <- specieslist[!duplicated(specieslist),]
#write.csv(specieslist, file="listofspecies.csv", row.names=FALSE)
trx <- subset(trx, select=c("imageID", "class"))
### Prepare for download...
images <- trx
images$camera <- substr(trx$imageID, 0, 6)
head(images)
sort(unique(images$camera))
images$camera <- ifelse(images$camera == "ATXing", substr(images$imageID, 8, 13), images$camera)
sort(unique(images$camera))
sort(unique(trx$imageID))
tr<-read.csv("WildlifeDetections_CameraTrap.csv", header=TRUE)
trx<-subset(tr, select=c("Sampling.Event", "Raw.Name", "Genus", "Species"))
trx$imageID <- paste(trx$Sampling.Event, trx$Raw.Name, sep="_")
sort(unique(trx$Sampling.Event))
download.file('https://tnc.app.box.com/folder/65739071083?raw=1',
destfile=trx$Raw.Name[(trx$Sampling.Event=="CAM01A_06152017_06202017")],
method="auto")
cam01A <- images[(images$camera=="CAM01A"),]
View(cam01A)
