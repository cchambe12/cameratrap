#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, eigen)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig, by="lat.long")
head(prep_space)
range(eigen)
table(prep_space$eigen)
write.csv(prep_space, file="~/Documents/git/regionalrisk/analyses/output/fs_space_orig.csv", row.names=FALSE)
colnames(prep_space)
table(prep_space$fs.count, prep_space$species)
dselect<-read.csv("~/Documents/git/regionalrisk/analyses/output/memselect_orig.csv", header=TRUE)
dx<-cbind(bbs, dselect)
bb<-read.csv("/n/wolkovich_lab/Lab/Cat/fs_allspp_dvr_allpred.csv", header=TRUE)
bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_allspp_dvr_allpred.csv", header=TRUE)
bb$lat.long<-paste(bb$lat, bb$long)
bb$Y<-ave(bb$fs.count, bb$lat.long, FUN=sum)
bbs<-bb[!duplicated(bb$lat.long),]
dx<-cbind(bbs, dselect)
load("/Users/CatherineChamberlain/Documents/git/regionalrisk/orig_bigpriors.Rdata")
orig.bigpriors
bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_allspp_orig_allpred.csv", header=TRUE)
bb$lat.long<-paste(bb$lat, bb$long)
bb$Y<-ave(bb$fs.count, bb$lat.long, FUN=sum)
bbs<-bb[!duplicated(bb$lat.long),]
dselect<-read.csv("~/Documents/git/regionalrisk/analyses/output/memselect_orig.csv", header=TRUE)
dx<-cbind(bbs, dselect)
rex<-dx%>%dplyr::select(-lat.long, -lat, -long, -species, -lat.long, -distance, -year)
library(dplyr)
rex<-dx%>%dplyr::select(-lat.long, -lat, -long, -species, -lat.long, -distance, -year)
rex.mod<-lm(fs.count~ ., data=rex)
space<-residuals(rex.mod)
eigen<-space
#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, eigen)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig, by="lat.long")
View(prep_space)
check<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_new.csv", header=TRUE)
range(check$eigen)
range(prep_space$eigen)
dselect<-read.csv("~/Documents/git/regionalrisk/analyses/output/memselect_orig.csv", header=TRUE)
colnames(dselect)
colnames(dx)
dx<-cbind(bbs, dselect)
rex<-dx%>%dplyr::select(-lat.long, -lat, -long, -species, -lat.long, -distance, -year, -fs.count, -nao, -cc)
rex.mod<-lm(Y~ ., data=rex)
space<-residuals(rex.mod)
eigen<-space
#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, eigen)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig, by="lat.long")
range(prep_space$eigen)
bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_orig.csv", header=TRUE)
#bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_orig.csv", header=TRUE)
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$nao.z <- (bb$nao-mean(bb$nao,na.rm=TRUE))/(2*sd(bb$nao,na.rm=TRUE))
bb$mat.z <- (bb$mst-mean(bb$mst,na.rm=TRUE))/(2*sd(bb$mst,na.rm=TRUE))
bb$cc.z <- (bb$cc-mean(bb$cc,na.rm=TRUE))/(2*sd(bb$cc,na.rm=TRUE))
bb$elev.z <- (bb$elev-mean(bb$elev,na.rm=TRUE))/(2*sd(bb$elev,na.rm=TRUE))
bb$lat.z <- (bb$lat-mean(bb$lat,na.rm=TRUE))/(2*sd(bb$lat,na.rm=TRUE))
bb$dist.z <-(bb$distkm-mean(bb$distkm,na.rm=TRUE))/(2*sd(bb$distkm,na.rm=TRUE))
bb$space.z <-(bb$eigen-mean(bb$eigen,na.rm=TRUE))/(2*sd(bb$eigen,na.rm=TRUE))
bb<-read.csv("~/Documents/git/regionalrisk/analyses/fs_space_orig.csv", header=TRUE)
bb<-read.csv("~/Documents/git/regionalrisk/fs_space_orig.csv", header=TRUE)
#bb<-read.csv("~/Documents/git/regionalrisk/fs_space_orig.csv", header=TRUE)
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
colnames(bb)
#dselect<-read.csv("~/Documents/git/regionalrisk/analyses/output/memselect_orig.csv", header=TRUE)
deselect<-bb
bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_allspp_orig_allpred.csv", header=TRUE)
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$lat.long<-paste(bb$lat, bb$long)
bb$Y<-ave(bb$fs, bb$lat.long, FUN=sum)
bbs<-bb[!duplicated(bb$lat.long),]
dx<-cbind(bbs, dselect)
library(dplyr)
rex<-dx%>%dplyr::select(-lat.long, -lat, -long, -species, -lat.long, -distance, -year, -fs.count, -nao, -cc, -fs)
rex.mod<-lm(Y~ ., data=rex)
space<-residuals(rex.mod)
eigen<-space
#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, eigen)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig, by="lat.long")
#write.csv(prep_space, file="~/Documents/git/regionalrisk/analyses/output/fs_space_dvr.csv", row.names=FALSE)
write.csv(dx, file="/n/wolkovich_lab/Lab/Cat/fs_space_orig.csv", row.names=FALSE)
#write.csv(prep_space, file="~/Documents/git/regionalrisk/analyses/output/fs_space_dvr.csv", row.names=FALSE)
write.csv(prep_space, file="/n/wolkovich_lab/Lab/Cat/fs_space_orig.csv", row.names=FALSE)
write.csv(prep_space, file="~/Documents/git/regionalrisk/analyses/output/fs_space_orig.csv", row.names=FALSE)
range(prep_space$eigen)
bb<-read.csv("~/Documents/git/regionalrisk/fs_space_dvr.csv", header=TRUE)
#bb<-read.csv("~/Documents/git/regionalrisk/fs_space_dvr.csv", header=TRUE)
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
dselect<-read.csv("~/Documents/git/regionalrisk/memselect_dvr.csv", header=TRUE)
dselect<-read.csv("~/Documents/git/regionalrisk/analyses/scripts/memselect_dvr.csv", header=TRUE)
bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_allspp_dvr_allpred.csv", header=TRUE)
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$lat.long<-paste(bb$lat, bb$long)
bb$Y<-ave(bb$fs, bb$lat.long, FUN=sum)
bbs<-bb[!duplicated(bb$lat.long),]
#dselect<-read.csv("~/Documents/git/regionalrisk/analyses/scripts/memselect_dvr.csv", header=TRUE)
#deselect<-bb
dx<-cbind(bbs, dselect)
library(dplyr)
rex<-dx%>%dplyr::select(-lat.long, -lat, -long, -species, -lat.long, -distance, -year, -fs.count, -nao, -cc, -fs)
rex.mod<-lm(Y~ ., data=rex)
space<-residuals(rex.mod)
eigen<-space
#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, eigen)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig, by="lat.long")
write.csv(prep_space, file="~/Documents/git/regionalrisk/analyses/output/fs_space_dvr.csv", row.names=FALSE)
range(prep_space$eigen)
bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_allspp_orig_allpred.csv", header=TRUE)
foo<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_dvr.csv", header=TRUE)
x<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_orig.csv", header=TRUE)
write.csv(dselect, file="/n/wolkovich_lab/Lab/Cat/memselect_orig.csv", row.names=FALSE)
dselect<-read.csv("~/Documents/git/regionalrisk/analyses/scripts/memselect_orig.csv", header=TRUE)
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$lat.long<-paste(bb$lat, bb$long)
bb$Y<-ave(bb$fs, bb$lat.long, FUN=sum)
bbs<-bb[!duplicated(bb$lat.long),]
#dselect<-read.csv("~/Documents/git/regionalrisk/analyses/scripts/memselect_orig.csv", header=TRUE)
#deselect<-bb
dx<-cbind(bbs, dselect)
library(dplyr)
rex<-dx%>%dplyr::select(-lat.long, -lat, -long, -species, -lat.long, -distance, -year, -fs.count, -nao, -cc, -fs)
rex.mod<-lm(Y~ ., data=rex)
space<-residuals(rex.mod)
eigen<-space
#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, eigen)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig, by="lat.long")
range(prep_space$eigen)
range(x$eigen)
write.csv(prep_space, file="~/Documents/git/regionalrisk/analyses/output/fs_space_orig.csv", row.names=FALSE)
x<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_allspp_orig_allpred.csv", header=TRUE)
bb<-x
#bb<-x
#bb$fs<-ifelse(bb$fs.count>0, 1, 0)
#bb$lat.long<-paste(bb$lat, bb$long)
#bb$Y<-ave(bb$fs, bb$lat.long, FUN=sum)
#bbs<-bb%>%dplyr::select(lat.long, Y, elev, distkm, lat, long, fs.count)
#bbs$fs.count<-ave(bb$fs, bb$lat.long)
bbs<-bb[!duplicated(bb$lat.long),]
dselect<-read.csv("~/Documents/git/regionalrisk/analyses/scripts/memselect_orig.csv", header=TRUE)
dx<-cbind(bbs, dselect)
colnames(dx)
#eigen<-rowMeans(dx[,13:493])
dx$eigen<-dx[,13]
#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, dx)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig)
bb<-prep_space
library(dplyr)
prep_space<-full_join(bb, beig)
bb<-prep_space
#bb$eigen<-rowMeans(bb[,20:24])
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$nao.z <- (bb$nao-mean(bb$nao,na.rm=TRUE))/(2*sd(bb$nao,na.rm=TRUE))
bb$mat.z <- (bb$mst-mean(bb$mst,na.rm=TRUE))/(2*sd(bb$mst,na.rm=TRUE))
bb$cc.z <- (bb$cc-mean(bb$cc,na.rm=TRUE))/(2*sd(bb$cc,na.rm=TRUE))
bb$elev.z <- (bb$elev-mean(bb$elev,na.rm=TRUE))/(2*sd(bb$elev,na.rm=TRUE))
#bb$lat.z <- (bb$lat-mean(bb$lat,na.rm=TRUE))/(2*sd(bb$lat,na.rm=TRUE))
bb$dist.z <-(bb$distkm-mean(bb$distkm,na.rm=TRUE))/(2*sd(bb$distkm,na.rm=TRUE))
bb$space.z <-(bb$eigen-mean(bb$eigen,na.rm=TRUE))/(2*sd(bb$eigen,na.rm=TRUE))
bb$space2.z <-(bb$eigen2-mean(bb$eigen2,na.rm=TRUE))/(2*sd(bb$eigen2,na.rm=TRUE))
norm.first<-glm(fs~ nao.z + mat.z + dist.z + elev.z + space.z +
cc.z + species + nao.z:species +
mat.z:species + dist.z:species + elev.z:species + space.z:species +
cc.z:species +
nao.z:cc.z + mat.z:cc.z + dist.z:cc.z + elev.z:cc.z + space.z:cc.z,
data=bb, family=binomial())
summary(norm.first)
noncenspace.first<-glm(fs~ nao.z + mat.z + dist.z + elev.z + eigen +
cc.z + species + nao.z:species +
mat.z:species + dist.z:species + elev.z:species + cc.z:species + eigen:species +
nao.z:cc.z + mat.z:cc.z + dist.z:cc.z + elev.z:cc.z + eigen:cc.z,
data=bb, family=binomial())
summary(noncenspace.first)
write.csv(prep_space, file="~/Documents/git/regionalrisk/analyses/output/fs_space_orig.csv", row.names=FALSE)
x<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_allspp_dvr_allpred.csv", header=TRUE)
bb<-x
#bb<-x
#bb$fs<-ifelse(bb$fs.count>0, 1, 0)
#bb$lat.long<-paste(bb$lat, bb$long)
#bb$Y<-ave(bb$fs, bb$lat.long, FUN=sum)
#bbs<-bb%>%dplyr::select(lat.long, Y, elev, distkm, lat, long, fs.count)
#bbs$fs.count<-ave(bb$fs, bb$lat.long)
bbs<-bb[!duplicated(bb$lat.long),]
dselect<-read.csv("~/Documents/git/regionalrisk/memselect_dvr.csv", header=TRUE)
dx<-cbind(bbs, dselect)
rex<-dx%>%dplyr::select(-lat.long, -distance, -lat, -long, -cc, -species, -nao, -mst, -year)
#test<-full_join(bbs, MEM.select)
#test<-test%>%dplyr::select(-species, -lat.long, -distance)
rex.mod<-lm(fs.count~ ., data=rex)
space<-residuals(rex.mod)
eigen<-space
#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, dx)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig)
#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, eigen)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig)
bb<-prep_space
#bb$eigen<-rowMeans(bb[,20:24])
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$nao.z <- (bb$nao-mean(bb$nao,na.rm=TRUE))/(2*sd(bb$nao,na.rm=TRUE))
bb$mat.z <- (bb$mst-mean(bb$mst,na.rm=TRUE))/(2*sd(bb$mst,na.rm=TRUE))
bb$cc.z <- (bb$cc-mean(bb$cc,na.rm=TRUE))/(2*sd(bb$cc,na.rm=TRUE))
bb$elev.z <- (bb$elev-mean(bb$elev,na.rm=TRUE))/(2*sd(bb$elev,na.rm=TRUE))
#bb$lat.z <- (bb$lat-mean(bb$lat,na.rm=TRUE))/(2*sd(bb$lat,na.rm=TRUE))
bb$dist.z <-(bb$distkm-mean(bb$distkm,na.rm=TRUE))/(2*sd(bb$distkm,na.rm=TRUE))
bb$space.z <-(bb$eigen-mean(bb$eigen,na.rm=TRUE))/(2*sd(bb$eigen,na.rm=TRUE))
bb$space2.z <-(bb$eigen2-mean(bb$eigen2,na.rm=TRUE))/(2*sd(bb$eigen2,na.rm=TRUE))
norm.first<-glm(fs~ nao.z + mat.z + dist.z + elev.z + space.z +
cc.z + species + nao.z:species +
mat.z:species + dist.z:species + elev.z:species + space.z:species +
cc.z:species +
nao.z:cc.z + mat.z:cc.z + dist.z:cc.z + elev.z:cc.z + space.z:cc.z,
data=bb, family=binomial())
summary(norm.first)
bb<-x
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
#bb<-x
#bb$fs<-ifelse(bb$fs.count>0, 1, 0)
#bb$lat.long<-paste(bb$lat, bb$long)
#bb$Y<-ave(bb$fs, bb$lat.long, FUN=sum)
#bbs<-bb%>%dplyr::select(lat.long, Y, elev, distkm, lat, long, fs.count)
#bbs$fs.count<-ave(bb$fs, bb$lat.long)
bbs<-bb[!duplicated(bb$lat.long),]
dx<-cbind(bbs, dselect)
rex<-dx%>%dplyr::select(-lat.long, -distance, -lat, -long, -cc, -species, -nao, -mst, -year)
#test<-full_join(bbs, MEM.select)
#test<-test%>%dplyr::select(-species, -lat.long, -distance)
rex.mod<-lm(fs.count~ ., data=rex)
space<-residuals(rex.mod)
eigen<-space
#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, eigen)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig)
bb<-prep_space
#bb$eigen<-rowMeans(bb[,20:24])
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$nao.z <- (bb$nao-mean(bb$nao,na.rm=TRUE))/(2*sd(bb$nao,na.rm=TRUE))
bb$mat.z <- (bb$mst-mean(bb$mst,na.rm=TRUE))/(2*sd(bb$mst,na.rm=TRUE))
bb$cc.z <- (bb$cc-mean(bb$cc,na.rm=TRUE))/(2*sd(bb$cc,na.rm=TRUE))
bb$elev.z <- (bb$elev-mean(bb$elev,na.rm=TRUE))/(2*sd(bb$elev,na.rm=TRUE))
#bb$lat.z <- (bb$lat-mean(bb$lat,na.rm=TRUE))/(2*sd(bb$lat,na.rm=TRUE))
bb$dist.z <-(bb$distkm-mean(bb$distkm,na.rm=TRUE))/(2*sd(bb$distkm,na.rm=TRUE))
bb$space.z <-(bb$eigen-mean(bb$eigen,na.rm=TRUE))/(2*sd(bb$eigen,na.rm=TRUE))
norm.first<-glm(fs~ nao.z + mat.z + dist.z + elev.z + space.z +
cc.z + species + nao.z:species +
mat.z:species + dist.z:species + elev.z:species + space.z:species +
cc.z:species +
nao.z:cc.z + mat.z:cc.z + dist.z:cc.z + elev.z:cc.z + space.z:cc.z,
data=bb, family=binomial())
summary(norm.first)
load("~/Documents/git/regionalrisk/orig_short.Rdata")
orig.short
load("~/Documents/git/orig_full.Rdata")
orig.full
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
#library(devtools)
#devtools::install_github("mikeyEcology/MLWIC")
library(MLWIC)
library(reticulate)
library(tensorflow)
setwd("~/Documents/git/cameratrap")
## Step 2: load tensorflow -
devtools::install_github("rstudio/tensorflow")
## Step 2: load tensorflow -
#devtools::install_github("rstudio/tensorflow")
library(tensorflow)
install_tensorflow()
setwd("~/Documents/git/cameratrap")
sess = tf$Session()
#install_tensorflow()
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
# Step 3: edit names in dataframe
d<-read.csv("image_labels.csv")
colnames(d)<-c("a", "b")
d$a<-as.character(d$a)
colnames(d)<-NULL
write.csv(d, file="~/Documents/git/cameratrap/image_labels.csv", row.names = FALSE)
classify(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/images", # this is the absolute path to the images.
log_dir = "training_output",
data_info = "~/Documents/git/cameratrap/image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "~/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/usr/local/bin/", # the location of Python on your computer.
save_predictions = "model_predictions.txt" # this is the default and you should use it unless you have reason otherwise.
)
make_output(output_location = "~/Documents/git/cameratrap", # the output csv will be stored on my dekstop
output_name = "example_results.csv", # the name of the csv I want to create with my output
model_dir = "~/Documents/git/cameratrap", # the location where I stored the L1 folder
saved_predictions = "model_predictions.txt" # the same name that I used for save_predictions in the classify function (if I didn't use default, I would need to change this).
)
#install_tensorflow()
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
classify(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/images", # this is the absolute path to the images.
log_dir = "training_output",
data_info = "~/Documents/git/cameratrap/image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "~/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/usr/local/bin/", # the location of Python on your computer.
save_predictions = "model_predictions.txt" # this is the default and you should use it unless you have reason otherwise.
)
classify(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/images", # this is the absolute path to the images.
log_dir = "train",
data_info = "~/Documents/git/cameratrap/image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "~/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/usr/local/bin/", # the location of Python on your computer.
save_predictions = "model_predictions.txt" # this is the default and you should use it unless you have reason otherwise.
)
train(path_prefix = "~/Documents/git/cameratrap/images", # this is the absolute path to the images.
data_info = "~/Documents/git/cameratrap/train_image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "~/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/usr/local/bin/", # the location of Python on your computer.
num_classes = 3, # this is the number of species from our model. When you train your own model, you will replace this with the number of species/groups of species in your dataset
log_dir_train = "training_output" # this will be a folder that contains the trained model (call it whatever you want). You will specify this folder as the "log_dir" when you classify images using this trained model. For example, the log_dir for the model included in this package is called "USDA182"
)
class(d$b)
class(d[,2])
classify(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/images/", # this is the absolute path to the images.
log_dir = "train",
data_info = "~/Documents/git/cameratrap/image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "~/Documents/git/cameratrap/", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/usr/local/bin/", # the location of Python on your computer.
save_predictions = "model_predictions.txt" # this is the default and you should use it unless you have reason otherwise.
)
setup(python_loc = /Users/CatherineChamberlain/anaconda3/bin/python)
setup(python_loc = "/Users/CatherineChamberlain/anaconda3/bin/python")
classify(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/images", # this is the absolute path to the images.
log_dir = "train",
data_info = "~/Documents/git/cameratrap/image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "~/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/usr/local/bin/", # the location of Python on your computer.
save_predictions = "model_predictions.txt" # this is the default and you should use it unless you have reason otherwise.
)
train(path_prefix = "~/Documents/git/cameratrap/images", # this is the absolute path to the images.
data_info = "~/Documents/git/cameratrap/train_image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "~/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/usr/local/bin/", # the location of Python on your computer.
num_classes = 3, # this is the number of species from our model. When you train your own model, you will replace this with the number of species/groups of species in your dataset
log_dir_train = "training_output" # this will be a folder that contains the trained model (call it whatever you want). You will specify this folder as the "log_dir" when you classify images using this trained model. For example, the log_dir for the model included in this package is called "USDA182"
)
x<-read.csv("training_image_labels.csv", header=TRUE)
setwd("~/Documents/git/cameratrap")
x<-read.csv("training_image_labels.csv", header=TRUE)
x<-read.csv("train_image_labels.csv", header=TRUE)
class(d[,2])
train(path_prefix = "~/Documents/git/cameratrap/images", # this is the absolute path to the images.
data_info = "~/Documents/git/cameratrap/train_image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "~/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/Users/CatherineChamberlain/anaconda3/bin/python", # the location of Python on your computer.
num_classes = 3, # this is the number of species from our model. When you train your own model, you will replace this with the number of species/groups of species in your dataset
log_dir_train = "training_output" # this will be a folder that contains the trained model (call it whatever you want). You will specify this folder as the "log_dir" when you classify images using this trained model. For example, the log_dir for the model included in this package is called "USDA182"
)
train(path_prefix = "~/Documents/git/cameratrap/images", # this is the absolute path to the images.
data_info = "~/Documents/git/cameratrap/image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "~/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/Users/CatherineChamberlain/anaconda3/bin/python", # the location of Python on your computer.
num_classes = 28, # this is the number of species from our model. When you train your own model, you will replace this with the number of species/groups of species in your dataset
log_dir_train = "training_output" # this will be a folder that contains the trained model (call it whatever you want). You will specify this folder as the "log_dir" when you classify images using this trained model. For example, the log_dir for the model included in this package is called "USDA182"
)
classify(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/images", # this is the absolute path to the images.
data_info = "~/Documents/git/cameratrap/image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "~/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/usr/local/bin/", # the location of Python on your computer.
save_predictions = "model_predictions.txt" # this is the default and you should use it unless you have reason otherwise.
)
make_output(output_location = "~/Documents/git/cameratrap/", # the output csv will be stored on my dekstop
output_name = "example_results.csv", # the name of the csv I want to create with my output
model_dir = "~/Documents/git/cameratrap/", # the location where I stored the L1 folder
saved_predictions = "model_predictions.txt" # the same name that I used for save_predictions in the classify function (if I didn't use default, I would need to change this).
)
make_output(output_location = "~/Documents/git/cameratrap", # the output csv will be stored on my dekstop
output_name = "example_results.csv", # the name of the csv I want to create with my output
model_dir = "~/Documents/git/cameratrap", # the location where I stored the L1 folder
saved_predictions = "model_predictions.txt" # the same name that I used for save_predictions in the classify function (if I didn't use default, I would need to change this).
)
train(path_prefix = "~/Documents/git/cameratrap/images", # this is the absolute path to the images.
data_info = "~/Documents/git/cameratrap/train_image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "~/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/Users/CatherineChamberlain/anaconda3/bin/python", # the location of Python on your computer.
num_classes = 3, # this is the number of species from our model. When you train your own model, you will replace this with the number of species/groups of species in your dataset
log_dir_train = "training_output" # this will be a folder that contains the trained model (call it whatever you want). You will specify this folder as the "log_dir" when you classify images using this trained model. For example, the log_dir for the model included in this package is called "USDA182"
)
train(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/images", # this is the absolute path to the images.
data_info = "/Users/CatherineChamberlain/Documents/git/cameratrap/train_image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "/Users/CatherineChamberlain/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/Users/CatherineChamberlain/anaconda3/bin/python", # the location of Python on your computer.
num_classes = 3, # this is the number of species from our model. When you train your own model, you will replace this with the number of species/groups of species in your dataset
log_dir_train = "training_output" # this will be a folder that contains the trained model (call it whatever you want). You will specify this folder as the "log_dir" when you classify images using this trained model. For example, the log_dir for the model included in this package is called "USDA182"
)
train(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/images", # this is the absolute path to the images.
data_info = "/Users/CatherineChamberlain/Documents/git/cameratrap/train_image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "/Users/CatherineChamberlain/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/Users/CatherineChamberlain/anaconda3/bin/python", # the location of Python on your computer.
num_classes = 3, # this is the number of species from our model. When you train your own model, you will replace this with the number of species/groups of species in your dataset
log_dir_train = "/Users/CatherineChamberlain/Documents/git/cameratrap/training_output" # this will be a folder that contains the trained model (call it whatever you want). You will specify this folder as the "log_dir" when you classify images using this trained model. For example, the log_dir for the model included in this package is called "USDA182"
)
classify(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/images", # this is the absolute path to the images.
data_info = "~/Documents/git/cameratrap/image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "~/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/usr/local/bin/", # the location of Python on your computer.
save_predictions = "model_predictions.txt" # this is the default and you should use it unless you have reason otherwise.
)
make_output(output_location = "~/Documents/git/cameratrap", # the output csv will be stored on my dekstop
output_name = "example_results.csv", # the name of the csv I want to create with my output
model_dir = "~/Documents/git/cameratrap", # the location where I stored the L1 folder
saved_predictions = "model_predictions.txt" # the same name that I used for save_predictions in the classify function (if I didn't use default, I would need to change this).
)
classify(path_prefix = "images", # this is the absolute path to the images.
data_info = "image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "L1", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/Users/CatherineChamberlain/anaconda3/bin/python", # the location of Python on your computer.
save_predictions = "model_predictions.txt" # this is the default and you should use it unless you have reason otherwise.
)
setwd("~/Documents/git/cameratrap")
classify(path_prefix = "images", # this is the absolute path to the images.
data_info = "image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "L1", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/Users/CatherineChamberlain/anaconda3/bin/python", # the location of Python on your computer.
save_predictions = "model_predictions.txt" # this is the default and you should use it unless you have reason otherwise.
)
classify(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/imagesimages", # this is the absolute path to the images.
data_info = "/Users/CatherineChamberlain/Documents/git/cameratrap/image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "/Users/CatherineChamberlain/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/Users/CatherineChamberlain/anaconda3/bin/python", # the location of Python on your computer.
save_predictions = "/Users/CatherineChamberlain/Documents/git/cameratrap/L1/model_predictions.txt" # this is the default and you should use it unless you have reason otherwise.
)
classify(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/imagesimages", # this is the absolute path to the images.
data_info = "/Users/CatherineChamberlain/Documents/git/cameratrap/image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "/Users/CatherineChamberlain/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/Users/CatherineChamberlain/anaconda3/bin/python", # the location of Python on your computer.
save_predictions = "model_predictions.txt" # this is the default and you should use it unless you have reason otherwise.
)
classify(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/imagesimages", # this is the absolute path to the images.
data_info = "/Users/CatherineChamberlain/Documents/git/cameratrap/image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "/Users/CatherineChamberlain/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/usr/local/bin/", # the location of Python on your computer.
save_predictions = "model_predictions.txt" # this is the default and you should use it unless you have reason otherwise.
)
classify(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/images", # this is the absolute path to the images.
data_info = "/Users/CatherineChamberlain/Documents/git/cameratrap/image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "/Users/CatherineChamberlain/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/usr/local/bin/", # the location of Python on your computer.
save_predictions = "model_predictions.txt" # this is the default and you should use it unless you have reason otherwise.
)
# Step 3: edit names in dataframe
d<-read.csv("image_labels.csv")
head(d)
head(d)
# Step 3: edit names in dataframe
d<-read.csv("image_labels.csv")
classify(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/images", # this is the absolute path to the images.
data_info = "/Users/CatherineChamberlain/Documents/git/cameratrap/image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "/Users/CatherineChamberlain/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/usr/local/bin/", # the location of Python on your computer.
save_predictions = "model_predictions.txt" # this is the default and you should use it unless you have reason otherwise.
)
classify(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/images", # this is the absolute path to the images.
data_info = "/Users/CatherineChamberlain/Documents/git/cameratrap/image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "/Users/CatherineChamberlain/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/usr/local/bin/", # the location of Python on your computer.
save_predictions = "model_predictions.txt" # this is the default and you should use it unless you have reason otherwise.
)
make_output(output_location = "~/Documents/git/cameratrap", # the output csv will be stored on my dekstop
output_name = "example_results.csv", # the name of the csv I want to create with my output
model_dir = "~/Documents/git/cameratrap", # the location where I stored the L1 folder
saved_predictions = "model_predictions.txt" # the same name that I used for save_predictions in the classify function (if I didn't use default, I would need to change this).
)
train(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/images", # this is the absolute path to the images.
data_info = "/Users/CatherineChamberlain/Documents/git/cameratrap/train_image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "/Users/CatherineChamberlain/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/Users/CatherineChamberlain/anaconda3/bin/python", # the location of Python on your computer.
num_classes = 3, # this is the number of species from our model. When you train your own model, you will replace this with the number of species/groups of species in your dataset
log_dir_train = "/Users/CatherineChamberlain/Documents/git/cameratrap/training_output" # this will be a folder that contains the trained model (call it whatever you want). You will specify this folder as the "log_dir" when you classify images using this trained model. For example, the log_dir for the model included in this package is called "USDA182"
)
train(path_prefix = "/Users/CatherineChamberlain/Documents/git/cameratrap/images", # this is the absolute path to the images.
data_info = "/Users/CatherineChamberlain/Documents/git/cameratrap/train_image_labels.csv", # this is the location of the csv containing image information. It has Unix linebreaks and no headers.
model_dir = "/Users/CatherineChamberlain/Documents/git/cameratrap", # assuming this is where you stored the L1 folder in Step 3 of the instructions: github.com/mikeyEcology/MLWIC/blob/master/README
python_loc = "/usr/local/bin/", # the location of Python on your computer.
num_classes = 3, # this is the number of species from our model. When you train your own model, you will replace this with the number of species/groups of species in your dataset
log_dir_train = "/Users/CatherineChamberlain/Documents/git/cameratrap/training_output" # this will be a folder that contains the trained model (call it whatever you want). You will specify this folder as the "log_dir" when you classify images using this trained model. For example, the log_dir for the model included in this package is called "USDA182"
)
load("/Users/CatherineChamberlain/Documents/git/regionalrisk/orig_short.Rdata")
orig.short
